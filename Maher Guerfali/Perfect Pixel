#include <stdio.h>
#include  <stdlib.h>
 #include  <SDL/SDL.h>
 #include <SDL/SDL_image.h>
 #include <stdbool.h>
 


int main()
{
SDL_Surface *screen , *image , *image1; 
SDL_Rect position , position1 ; 
SDL_Event event,event2 ; 
int done=0 ,x,y,donee=0 ; 





 if  ( SDL_Init ( SDL_INIT_VIDEO )  == -1 )  { 
         printf ( "Can not init SDL \n " ); 
 
     } 

     screen  =  SDL_SetVideoMode ( 1920 ,  1080 ,  16 ,  SDL_HWSURFACE  |  SDL_DOUBLEBUF ); 
     if  ( screen  ==  NULL )  { 
         printf ( "Can not set video mode: \n "); 
         
     } 
     SDL_FillRect ( screen ,  NULL ,  SDL_MapRGB ( screen -> format,  10,  90 ,  102 )); 
SDL_WM_SetCaption("Welcome  -------    ||  Maher Guerfali  ||    -------- Home ", NULL);
  
     image1  =  IMG_Load( "fl.png" ); 
     if  ( image1  ==  NULL )  { 
         printf ( "Can not load image of tux: %s \n " , SDL_GetError ()); 
         exit ( 1 ); 
     } 
     position1.x  =  600 ; 
     position1.y  =  500 ; 
     position1.w  =  image1 -> w ; 
     position1.h  =  image1 -> h ; 
         SDL_BlitSurface(image1, NULL , screen, &position1);
          SDL_Flip(screen);
          

     image  =  IMG_Load( "2.png" ); 
     if  ( image  ==  NULL )  { 
         printf ( "Can not load image of tux: %s \n " , SDL_GetError ()); 
         exit ( 1 ); 
     } 
     position.x  =  50 ; 
     position.y  =  50 ; 
     position.w  =  image -> w ; 
     position.h  =  image -> h ; 
         SDL_BlitSurface(image, NULL, screen, &position);
          SDL_Flip(screen);
     


      while  ( done==0 )  { 
         while  (SDL_PollEvent ( &event ))  { 
             switch  ( event.type )  { 
             case  SDL_QUIT : 
                 done  =  1 ; 
                 break ;  
                 
             case SDL_KEYDOWN : 
                     switch( event.key.keysym.sym )
                        {
							case SDLK_RIGHT : 
							position.x+=50;
							    SDL_FillRect ( screen ,  NULL ,  SDL_MapRGB ( screen -> format,  10,  90 ,  102 )); 
							             SDL_BlitSurface(image, NULL, screen, &position);
          SDL_Flip(screen);
                   SDL_BlitSurface(image1, NULL , screen, &position1);
          SDL_Flip(screen);
							break ; 
							case SDLK_LEFT : 
							position.x-=50 ;
							
							    SDL_FillRect ( screen ,  NULL ,  SDL_MapRGB ( screen -> format,  10,  90 ,  102 )); 
							             SDL_BlitSurface(image, NULL, screen, &position);
          SDL_Flip(screen); 
                   SDL_BlitSurface(image1, NULL , screen, &position1);
          SDL_Flip(screen);
							break ; 
							case SDLK_UP : 
							position.y-=50 ;
							
							    SDL_FillRect ( screen ,  NULL ,  SDL_MapRGB ( screen -> format,  10,  90 ,  102 )); 
							             SDL_BlitSurface(image, NULL, screen, &position);
          SDL_Flip(screen); 
                   SDL_BlitSurface(image1, NULL , screen, &position1);
          SDL_Flip(screen);
							break ; 
							case SDLK_DOWN  : 
						    position.y+=50;
						    
							    SDL_FillRect ( screen ,  NULL ,  SDL_MapRGB ( screen -> format,  10,  90 ,  102 )); 
							             SDL_BlitSurface(image, NULL, screen, &position);
          SDL_Flip(screen);
                   SDL_BlitSurface(image1, NULL , screen, &position1);
          SDL_Flip(screen);
        

							break ;
						}

SDL_Color GetPixel (SDL_Surface* pSurface, int x, int y)
{

  SDL_Color color;
  Uint32 col = 0;
  char *pPosition = (char*) pSurface -> pixels;
  pPosition += (pSurface -> pitch * y);
  pPosition += (pSurface->format->BytesPerPixel * x);
  memcpy (&col, pPosition, pSurface->format->BytesPerPixel);
  SDL_GetRGB (col, pSurface->format, &color.r, &color.g, &color.b);
  return (color);
}

int detecter_collision_background (SDL_Surface *image, SDL_Rect position)
{
  SDL_Color color;
  color = GetPixel (image, position.x, position.y+27/2);
  if (color.r==255 && color.g==255 && color.b==255) return 1;
  return 0;
}
int detecter_Pin (SDL_Surface *image, SDL_Rect position)
{
  SDL_Color color;
  color = GetPixel (image, position.x, position.y+27/2);
  if (color.r==0 && color.g==0 && color.b==0) return 1;
  return 0;
}


bool Collision_point_mid( SDL_Surface *Player , SDL_Surface *C_Object , SDL_Rect position , SDL_Rect position1  )
 {
	 
	 if ((((position.x+position.w)/2 == (position1.x)/2)&&((position.y+position.h)/2==(position1.y+position1.h)/2))  || (((position.x)/2 == (position1.x + position1.w)/2)&&((position.y+position.h)/2==(position1.y+position1.h)))/2 || (((position.y+position.h)/2 == (position1.y)/2)&&((position.x)/2==(position1.x)/2))|| (((position.y)/2 == ((position1.y + position1.h))/2)&&((position.x)/2==(position1.x)/2)) 
     {
		 return true ; 
	 }
   else return false ; 
	 
	 
 }

 if (CollisionBB(image,image1,position,position1))
 { 
	  SDL_FillRect ( screen ,  NULL ,  SDL_MapRGB ( screen -> format,  255 ,  255 ,  255 )); 
	            SDL_Flip(screen);  
	 }
						  
break ;  
}
}
}




return 0 ; 
}
